import{_ as d,W as t,X as r,Z as e,$ as a,a0 as n,Y as s,D as o}from"./framework-4b7e9ff4.js";const c={},l=s('<h1 id="neo4j-基础教程" tabindex="-1"><a class="header-anchor" href="#neo4j-基础教程" aria-hidden="true">#</a> Neo4j - 基础教程</h1><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1. 前言</h2><p>今天，我们来聊一聊知识图谱中的Neo4J。首先，什么是知识图谱？先摘一段百度百科：</p><blockquote><p>知识图谱（Knowledge Graph），在图书情报界称为知识域可视化或知识领域映射地图，是显示知识发展进程与结构关系的一系列各种不同的图形，用 可视化技术描述知识资源及其载体，挖掘、分析、 构建、绘制和显示知识及它们之间的相互联系。 知识图谱是通过将应用数学、 图形学、信息可视化技术、 信息科学等学科的理论与方法与计量学引文分析、共现分析等方法结合，并利用可视化的图谱形象地展示学科的核心结构、发展历史、 前沿领域以及整体知识架构达到多学科融合目的的现代理论。它能为学科研究提供切实的、有价值的参考。</p></blockquote><p>简单说来，知识图谱就是通过不同知识的关联性形成一个网状的知识结构，而这个知识结构，恰好就是人工智能AI的基石。当前AI领域热门的计算机图像、语音识别甚至是NLP，其实都是AI的<code>感知</code>能力，真正AI的<code>认知</code>能力，就要靠知识图谱。</p><p>知识图谱目前的应用主要在搜索、智能问答、推荐系统等方面。知识图谱的建设，一般包括数据获取、实体识别和关系抽取、数据存储、图谱应用都几个方面。本文着眼于数据存储这块，给大家一个Neo4J的快速教程。</p><h2 id="_2-neo4j简介" tabindex="-1"><a class="header-anchor" href="#_2-neo4j简介" aria-hidden="true">#</a> 2. Neo4J简介</h2>',7),g={href:"https://link.zhihu.com/?target=https%3A//neo4j.com/",target:"_blank",rel:"noopener noreferrer"},h=s(`<h2 id="_3-neo4j使用" tabindex="-1"><a class="header-anchor" href="#_3-neo4j使用" aria-hidden="true">#</a> 3. Neo4J使用</h2><p>Neo4J提供了一个用户友好的web界面，可以进行各项配置、写入、查询等操作，并且提供了可视化功能。类似ElasticSearch一样</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621150606240.png" alt="image-20230621150606240" tabindex="0" loading="lazy"><figcaption>image-20230621150606240</figcaption></figure><h2 id="_3-cypher查询语言" tabindex="-1"><a class="header-anchor" href="#_3-cypher查询语言" aria-hidden="true">#</a> 3. Cypher查询语言</h2><p>Cypher是Neo4J的声明式图形查询语言，允许用户不必编写图形结构的遍历代码，就可以对图形数据进行高效的查询。Cypher的设计目的类似SQL，适合于开发者以及在数据库上做点对点模式（ad-hoc）查询的专业操作人员。其具备的能力包括： - 创建、更新、删除节点和关系 - 通过模式匹配来查询和修改节点和关系 - 管理索引和约束等</p><h2 id="_4-neo4j实战教程" tabindex="-1"><a class="header-anchor" href="#_4-neo4j实战教程" aria-hidden="true">#</a> 4. Neo4J实战教程</h2><p>直接讲解Cypher的语法会非常枯燥，本文通过一个实际的案例来一步一步教你使用Cypher来操作Neo4J。</p><p>这个案例的节点主要包括人物和城市两类，人物和人物之间有朋友、夫妻等关系，人物和城市之间有出生地的关系。</p><h3 id="_4-1删除数据库中以往的图" tabindex="-1"><a class="header-anchor" href="#_4-1删除数据库中以往的图" aria-hidden="true">#</a> 4.1删除数据库中以往的图</h3><p>首先，我们删除数据库中以往的图，确保一个空白的环境进行操作：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (n) DETACH DELETE n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，<code>MATCH</code>是<strong>匹配</strong>操作，而小括号()代表一个<strong>节点</strong>node（可理解为括号类似一个圆形），括号里面的n为<strong>标识符</strong>。</p><h3 id="_4-2-创建一个节点" tabindex="-1"><a class="header-anchor" href="#_4-2-创建一个节点" aria-hidden="true">#</a> 4.2 创建一个节点</h3><p>接着，我们创建一个人物节点：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE (n:Person {name:&#39;John&#39;}) RETURN n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>CREATE</code>是<strong>创建</strong>操作，<code>Person</code>是<strong>标签</strong>，代表节点的类型。花括号{}代表节点的<strong>属性</strong>，属性类似Python的字典。这条语句的含义就是创建一个标签为Person的节点，该节点具有一个name属性，属性值是John。</p><p>如图所示，在Neo4J的界面上可以看到创建成功的节点。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621151606432.png" alt="image-20230621151606432" tabindex="0" loading="lazy"><figcaption>image-20230621151606432</figcaption></figure><h3 id="_4-3-创建多个接地那" tabindex="-1"><a class="header-anchor" href="#_4-3-创建多个接地那" aria-hidden="true">#</a> 4.3 创建多个接地那</h3><p>我们继续来创建更多的人物节点，并分别命名：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE (n:Person {name:&#39;Sally&#39;}) RETURN n;
CREATE (n:Person {name:&#39;Steve&#39;}) RETURN n;
CREATE (n:Person {name:&#39;Mike&#39;}) RETURN n;
CREATE (n:Person {name:&#39;Liz&#39;}) RETURN n;
CREATE (n:Person {name:&#39;Shawn&#39;}) RETURN n;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图所示，6个人物节点创建成功</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621151720546.png" alt="image-20230621151720546" tabindex="0" loading="lazy"><figcaption>image-20230621151720546</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621151829058.png" alt="image-20230621151829058" tabindex="0" loading="lazy"><figcaption>image-20230621151829058</figcaption></figure><h3 id="_4-4-创建地区节点" tabindex="-1"><a class="header-anchor" href="#_4-4-创建地区节点" aria-hidden="true">#</a> 4.4 创建地区节点</h3><p>接下来创建地区节点</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE (n:Location {city:&#39;Miami&#39;, state:&#39;FL&#39;});
CREATE (n:Location {city:&#39;Boston&#39;, state:&#39;MA&#39;});
CREATE (n:Location {city:&#39;Lynn&#39;, state:&#39;MA&#39;});
CREATE (n:Location {city:&#39;Portland&#39;, state:&#39;ME&#39;});
CREATE (n:Location {city:&#39;San Francisco&#39;, state:&#39;CA&#39;});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，节点类型为Location，属性包括city和state。</p><p>如图所示，共有6个人物节点、5个地区节点，Neo4J贴心地使用不用的颜色来表示不同类型的节点。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621152028490.png" alt="image-20230621152028490" tabindex="0" loading="lazy"><figcaption>image-20230621152028490</figcaption></figure><h3 id="_4-5-创建关系" tabindex="-1"><a class="header-anchor" href="#_4-5-创建关系" aria-hidden="true">#</a> 4.5 创建关系</h3><p>接下来创建关系</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person {name:&#39;Liz&#39;}), 
      (b:Person {name:&#39;Mike&#39;}) 
MERGE (a)-[:FRIENDS]-&gt;(b)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的方括号<code>[]</code>即为关系，<code>FRIENDS</code>为关系的类型。注意这里的箭头<code>--&gt;</code>是有方向的，表示是从a到b的关系。 如图，Liz和Mike之间建立了<code>FRIENDS</code>关系，通过Neo4J的可视化很明显的可以看出：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621152223584.png" alt="image-20230621152223584" tabindex="0" loading="lazy"><figcaption>image-20230621152223584</figcaption></figure><h3 id="_4-6-关系增加属性" tabindex="-1"><a class="header-anchor" href="#_4-6-关系增加属性" aria-hidden="true">#</a> 4.6 关系增加属性</h3><p>关系也可以增加属性</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person {name:&#39;Shawn&#39;}), 
      (b:Person {name:&#39;Sally&#39;}) 
MERGE (a)-[:FRIENDS {since:2001}]-&gt;(b)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在关系中，同样的使用花括号{}来增加关系的属性，也是类似Python的字典，这里给FRIENDS关系增加了since属性，属性值为2001，表示他们建立朋友关系的时间。</p><h3 id="_4-7-接下来增加更多的关系" tabindex="-1"><a class="header-anchor" href="#_4-7-接下来增加更多的关系" aria-hidden="true">#</a> 4.7 接下来增加更多的关系</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person {name:&#39;Shawn&#39;}), (b:Person {name:&#39;John&#39;}) MERGE (a)-[:FRIENDS {since:2012}]-&gt;(b);
MATCH (a:Person {name:&#39;Mike&#39;}), (b:Person {name:&#39;Shawn&#39;}) MERGE (a)-[:FRIENDS {since:2006}]-&gt;(b);
MATCH (a:Person {name:&#39;Sally&#39;}), (b:Person {name:&#39;Steve&#39;}) MERGE (a)-[:FRIENDS {since:2006}]-&gt;(b);
MATCH (a:Person {name:&#39;Liz&#39;}), (b:Person {name:&#39;John&#39;}) MERGE (a)-[:MARRIED {since:1998}]-&gt;(b);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图，人物关系图已建立好，有点图谱的意思了吧？</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621152426789.png" alt="image-20230621152426789" tabindex="0" loading="lazy"><figcaption>image-20230621152426789</figcaption></figure><h3 id="_4-8-建立不同类型节点之间的关系-人物和地点的关系" tabindex="-1"><a class="header-anchor" href="#_4-8-建立不同类型节点之间的关系-人物和地点的关系" aria-hidden="true">#</a> 4.8 建立不同类型节点之间的关系-人物和地点的关系</h3><p>然后，我们需要建立不同类型节点之间的关系-人物和地点的关系</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person {name:&#39;John&#39;}), (b:Location {city:&#39;Boston&#39;}) MERGE (a)-[:BORN_IN {year:1978}]-&gt;(b)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的关系是BORN_IN，表示出生地，同样有一个属性，表示出生年份。</p><p>如图，在人物节点和地区节点之间，人物出生地关系已建立好。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621152539657.png" alt="image-20230621152539657" tabindex="0" loading="lazy"><figcaption>image-20230621152539657</figcaption></figure><h3 id="_4-9-同样建立更多人的出生地" tabindex="-1"><a class="header-anchor" href="#_4-9-同样建立更多人的出生地" aria-hidden="true">#</a> 4.9 同样建立更多人的出生地</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person {name:&#39;Liz&#39;}), (b:Location {city:&#39;Boston&#39;}) MERGE (a)-[:BORN_IN {year:1981}]-&gt;(b)
MATCH (a:Person {name:&#39;Mike&#39;}), (b:Location {city:&#39;San Francisco&#39;}) MERGE (a)-[:BORN_IN {year:1960}]-&gt;(b)
MATCH (a:Person {name:&#39;Shawn&#39;}), (b:Location {city:&#39;Miami&#39;}) MERGE (a)-[:BORN_IN {year:1960}]-&gt;(b)
MATCH (a:Person {name:&#39;Steve&#39;}), (b:Location {city:&#39;Lynn&#39;}) MERGE (a)-[:BORN_IN {year:1970}]-&gt;(b)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建好以后，整个图如下</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621152630799.png" alt="image-20230621152630799" tabindex="0" loading="lazy"><figcaption>image-20230621152630799</figcaption></figure><h3 id="_4-10-查询所有在boston出生的人物" tabindex="-1"><a class="header-anchor" href="#_4-10-查询所有在boston出生的人物" aria-hidden="true">#</a> 4.10 查询所有在Boston出生的人物</h3><p>至此，知识图谱的数据已经插入完毕，可以开始做查询了。我们查询下所有在Boston出生的人物</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person)-[:BORN_IN]-&gt;(b:Location {city:&#39;Boston&#39;}) RETURN a,b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如图</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621152744476.png" alt="image-20230621152744476" tabindex="0" loading="lazy"><figcaption>image-20230621152744476</figcaption></figure><h3 id="_4-11-查询所有对外有关系的节点" tabindex="-1"><a class="header-anchor" href="#_4-11-查询所有对外有关系的节点" aria-hidden="true">#</a> 4.11 查询所有对外有关系的节点</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a)--&gt;() RETURN a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意这里箭头的方向，返回结果不含任何地区节点，因为地区并没有指向其他节点（只是被指向）</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621152836164.png" alt="image-20230621152836164" tabindex="0" loading="lazy"><figcaption>image-20230621152836164</figcaption></figure><h3 id="_4-12-查询所有有关系的节点" tabindex="-1"><a class="header-anchor" href="#_4-12-查询所有有关系的节点" aria-hidden="true">#</a> 4.12 查询所有有关系的节点</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a)--() RETURN a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如图</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621152905580.png" alt="image-20230621152905580" tabindex="0" loading="lazy"><figcaption>image-20230621152905580</figcaption></figure><h3 id="_4-13-查询所有对外有关系的节点-以及关系类型" tabindex="-1"><a class="header-anchor" href="#_4-13-查询所有对外有关系的节点-以及关系类型" aria-hidden="true">#</a> 4.13 查询所有对外有关系的节点，以及关系类型</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a)-[r]-&gt;() RETURN a.name, type(r)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如图</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621153113972.png" alt="image-20230621153113972" tabindex="0" loading="lazy"><figcaption>image-20230621153113972</figcaption></figure><h3 id="_4-14-查询所有有结婚关系的节点" tabindex="-1"><a class="header-anchor" href="#_4-14-查询所有有结婚关系的节点" aria-hidden="true">#</a> 4.14 查询所有有结婚关系的节点</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (n)-[:MARRIED]-() RETURN n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如图</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621153140425.png" alt="image-20230621153140425" tabindex="0" loading="lazy"><figcaption>image-20230621153140425</figcaption></figure><h3 id="_4-15-创建节点的时候就建好关系" tabindex="-1"><a class="header-anchor" href="#_4-15-创建节点的时候就建好关系" aria-hidden="true">#</a> 4.15 创建节点的时候就建好关系</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE (a:Person {name:&#39;Todd&#39;})-[r:FRIENDS]-&gt;(b:Person {name:&#39;Carlos&#39;})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如图</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621153214614.png" alt="image-20230621153214614" tabindex="0" loading="lazy"><figcaption>image-20230621153214614</figcaption></figure><h3 id="_4-16-查找某人的朋友的朋友" tabindex="-1"><a class="header-anchor" href="#_4-16-查找某人的朋友的朋友" aria-hidden="true">#</a> 4.16 查找某人的朋友的朋友</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person {name:&#39;Mike&#39;})-[r1:FRIENDS]-()-[r2:FRIENDS]-(friend_of_a_friend) RETURN friend_of_a_friend.name AS fofName
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回Mike的朋友的朋友：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621153317839.png" alt="image-20230621153317839" tabindex="0" loading="lazy"><figcaption>image-20230621153317839</figcaption></figure><p>从图上也可以看出，Mike的朋友是Shawn，Shawn的朋友是John和Sally</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230621153331316.png" alt="image-20230621153331316" tabindex="0" loading="lazy"><figcaption>image-20230621153331316</figcaption></figure><h3 id="_4-17-增加-修改节点的属性" tabindex="-1"><a class="header-anchor" href="#_4-17-增加-修改节点的属性" aria-hidden="true">#</a> 4. 17 增加/修改节点的属性</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person {name:&#39;Liz&#39;}) SET a.age=34
MATCH (a:Person {name:&#39;Shawn&#39;}) SET a.age=32
MATCH (a:Person {name:&#39;John&#39;}) SET a.age=44
MATCH (a:Person {name:&#39;Mike&#39;}) SET a.age=25
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，SET表示<code>修改</code>操作</p><h3 id="_4-18-删除节点的属性" tabindex="-1"><a class="header-anchor" href="#_4-18-删除节点的属性" aria-hidden="true">#</a> 4.18 删除节点的属性</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person {name:&#39;Mike&#39;}) SET a.test=&#39;test&#39;
MATCH (a:Person {name:&#39;Mike&#39;}) REMOVE a.test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除属性操作主要通过<code>REMOVE</code></p><h3 id="_4-19-删除节点" tabindex="-1"><a class="header-anchor" href="#_4-19-删除节点" aria-hidden="true">#</a> 4.19 删除节点</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Location {city:&#39;Portland&#39;}) DELETE a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除节点操作是<code>DELETE</code></p><h3 id="_4-20-删除有关系的节点" tabindex="-1"><a class="header-anchor" href="#_4-20-删除有关系的节点" aria-hidden="true">#</a> 4.20 删除有关系的节点</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MATCH (a:Person {name:&#39;Todd&#39;})-[rel]-(b:Person) DELETE a,b,rel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文重点针对常见的知识图谱图数据库Neo4J进行了介绍，并且采用一个实际的案例来说明Neo4J的查询语言Cypher的使用方法。</p><p>当然，类似MySQL一样，在实际的生产应用中，除了简单的查询操作会在Neo4J的web页面进行外，一般还是使用Python、Java等的driver来在程序中实现。后续会继续介绍编程语言如何操作Neo4J。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,99),m={href:"https://zhuanlan.zhihu.com/p/88745411",target:"_blank",rel:"noopener noreferrer"};function u(b,p){const i=o("ExternalLinkIcon");return t(),r("div",null,[l,e("p",null,[a("知识图谱由于其数据包含实体、属性、关系等，常见的关系型数据库诸如MySQL之类不能很好的体现数据的这些特点，因此知识图谱数据的存储一般是采用图数据库（Graph Databases）。而"),e("a",g,[a("Neo4j"),n(i)]),a("是其中最为常见的图数据库。")]),h,e("p",null,[e("a",m,[a("手把手教你快速入门知识图谱 - Neo4J教程"),n(i)])])])}const x=d(c,[["render",u],["__file","neo4j-x-tutorial.html.vue"]]);export{x as default};
