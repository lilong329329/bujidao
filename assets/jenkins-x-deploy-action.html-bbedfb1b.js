import{_ as g,W as r,X as o,Z as i,$ as e,a0 as s,Y as a,D as t}from"./framework-4b7e9ff4.js";const d={},c=a(`<h1 id="jenkins部署与实战" tabindex="-1"><a class="header-anchor" href="#jenkins部署与实战" aria-hidden="true">#</a> Jenkins部署与实战</h1><h2 id="_1-安装jenkins" tabindex="-1"><a class="header-anchor" href="#_1-安装jenkins" aria-hidden="true">#</a> 1. 安装Jenkins</h2><h3 id="_1-1-docker-中安装jenkins" tabindex="-1"><a class="header-anchor" href="#_1-1-docker-中安装jenkins" aria-hidden="true">#</a> 1.1 docker 中安装Jenkins</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -p 18080:8080 -p 50000:5000 --name jenkins \\
-u root \\
-v /home/jenkins/jenkins_home:/var/jenkins_home \\
-d jenkins/jenkins:2.357
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里选择2.357 版本、而不是lts 版本、主要是因为最新版本在lts 中底层依赖linux环境变成最简化了。不能使用apt-get等来安装软件、导致无法正常安装 maven、npm等</p></blockquote><h3 id="_1-2-登录jenkins" tabindex="-1"><a class="header-anchor" href="#_1-2-登录jenkins" aria-hidden="true">#</a> 1.2 登录jenkins</h3>`,6),l=i("p",null,"运行成功后访问该地址登录Jenkins，第一次登录需要输入管理员密码：",-1),h={href:"http://localhost:18080/",target:"_blank",rel:"noopener noreferrer"},p=i("figure",null,[i("img",{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718162800163.png",alt:"image-20220718162800163",tabindex:"0",loading:"lazy"}),i("figcaption",null,"image-20220718162800163")],-1),m=a(`<li><p>查看登录默认密码</p><ol><li><p>/var/jenkins_home/secrets/initialAdminPassword 文件查看</p></li><li><p>Jenkins 的启动日志中查看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718164259903.png" alt="image-20220718164259903" tabindex="0" loading="lazy"><figcaption>image-20220718164259903</figcaption></figure></li></ol></li>`,1),u=a(`<h3 id="_1-3-安装插件" tabindex="-1"><a class="header-anchor" href="#_1-3-安装插件" aria-hidden="true">#</a> 1.3 安装插件</h3><p>选择安装插件方式，这里我们直接安装推荐的插件：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718163403228.png" alt="image-20220718163403228" tabindex="0" loading="lazy"><figcaption>image-20220718163403228</figcaption></figure><ul><li><p>进入插件安装界面，联网等待插件安装：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718163528739.png" alt="image-20220718163528739" tabindex="0" loading="lazy"><figcaption>image-20220718163528739</figcaption></figure></li></ul><h3 id="_1-4-创建管理员账号" tabindex="-1"><a class="header-anchor" href="#_1-4-创建管理员账号" aria-hidden="true">#</a> 1.4 创建管理员账号</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718164407366.png" alt="image-20220718164407366" tabindex="0" loading="lazy"><figcaption>image-20220718164407366</figcaption></figure><h3 id="_1-5-进行实例配置-配置jenkins的url" tabindex="-1"><a class="header-anchor" href="#_1-5-进行实例配置-配置jenkins的url" aria-hidden="true">#</a> 1.5 进行实例配置，配置Jenkins的URL</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718164430212.png" alt="image-20220718164430212" tabindex="0" loading="lazy"><figcaption>image-20220718164430212</figcaption></figure><h3 id="_1-6-配置时间-可选" tabindex="-1"><a class="header-anchor" href="#_1-6-配置时间-可选" aria-hidden="true">#</a> 1.6 配置时间（可选）</h3><p>默认时间并不是北京时间、需要手动更改</p><p>管理员-设置-User Defined Time Zone</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609111144604.png" alt="image-20230609111144604" tabindex="0" loading="lazy"><figcaption>image-20230609111144604</figcaption></figure><h2 id="_2-凭据管理" tabindex="-1"><a class="header-anchor" href="#_2-凭据管理" aria-hidden="true">#</a> 2. 凭据管理</h2><h3 id="_2-1-凭据的作用" tabindex="-1"><a class="header-anchor" href="#_2-1-凭据的作用" aria-hidden="true">#</a> 2.1 凭据的作用</h3><p>凭据主要用来全局设置各种需要认证的数据。如</p><ul><li>git 的账号密码</li><li>服务器的账号密码等</li></ul><h3 id="_2-2-添加全局凭据入口" tabindex="-1"><a class="header-anchor" href="#_2-2-添加全局凭据入口" aria-hidden="true">#</a> 2.2 添加全局凭据入口</h3><p>系统管理-&gt; Manage Credentials -&gt; 凭据</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609103552034.png" alt="image-20230609103552034" tabindex="0" loading="lazy"><figcaption>image-20230609103552034</figcaption></figure><p>从这个入口添加全局jenkins的凭据</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609103621742.png" alt="image-20230609103621742" tabindex="0" loading="lazy"><figcaption>image-20230609103621742</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609103635053.png" alt="image-20230609103635053" tabindex="0" loading="lazy"><figcaption>image-20230609103635053</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609103649476.png" alt="image-20230609103649476" tabindex="0" loading="lazy"><figcaption>image-20230609103649476</figcaption></figure><h3 id="_2-3-全局凭据的添加" tabindex="-1"><a class="header-anchor" href="#_2-3-全局凭据的添加" aria-hidden="true">#</a> 2.3 全局凭据的添加</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609103924945.png" alt="image-20230609103924945" tabindex="0" loading="lazy"><figcaption>image-20230609103924945</figcaption></figure><p>此处的id 不设置也可以，会自动生成UUID。但是设置了可以在界面中展示，更好的选择</p><h2 id="_3-安装maven" tabindex="-1"><a class="header-anchor" href="#_3-安装maven" aria-hidden="true">#</a> 3. 安装maven</h2><h3 id="_3-1-方案1-通过全局配置的自动安装-不推荐" tabindex="-1"><a class="header-anchor" href="#_3-1-方案1-通过全局配置的自动安装-不推荐" aria-hidden="true">#</a> 3.1 方案1：通过全局配置的自动安装（不推荐）</h3><h4 id="_3-1-1-step1-添加全局配置" tabindex="-1"><a class="header-anchor" href="#_3-1-1-step1-添加全局配置" aria-hidden="true">#</a> 3.1.1 Step1：添加全局配置</h4><blockquote><p>设置了自动安装并不会立马安装maven，是需要触发条件的！！！</p><ol><li>配置自动安装</li><li>添加 Maven Integration 插件</li><li>构建一个maven项目（一定要用他界面的）</li></ol></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609105328446.png" alt="image-20230609105328446" tabindex="0" loading="lazy"><figcaption>image-20230609105328446</figcaption></figure><p>设置为自动安装</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609105344306.png" alt="image-20230609105344306" tabindex="0" loading="lazy"><figcaption>image-20230609105344306</figcaption></figure><h4 id="_3-1-2-step2-添加-maven-integration-插件" tabindex="-1"><a class="header-anchor" href="#_3-1-2-step2-添加-maven-integration-插件" aria-hidden="true">#</a> 3.1.2 Step2：添加 Maven Integration 插件</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609105900221.png" alt="image-20230609105900221" tabindex="0" loading="lazy"><figcaption>image-20230609105900221</figcaption></figure><h4 id="_3-1-3-step3-构建一个maven项目" tabindex="-1"><a class="header-anchor" href="#_3-1-3-step3-构建一个maven项目" aria-hidden="true">#</a> 3.1.3 Step3：构建一个maven项目</h4><p>一定要选择构建一个maven项目、运行后他才会去自动下载安装</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609105705294.png" alt="image-20230609105705294" tabindex="0" loading="lazy"><figcaption>image-20230609105705294</figcaption></figure><p>可以看到控制台已经帮我们安装了maven</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609110052063.png" alt="image-20230609110052063" tabindex="0" loading="lazy"><figcaption>image-20230609110052063</figcaption></figure><h3 id="_3-2-方案2-在jenkins服务器中安装maven" tabindex="-1"><a class="header-anchor" href="#_3-2-方案2-在jenkins服务器中安装maven" aria-hidden="true">#</a> 3.2 方案2：在jenkins服务器中安装maven</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>apt-get update
apt-get install -y maven
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-安装指定版本-node和npm" tabindex="-1"><a class="header-anchor" href="#_4-安装指定版本-node和npm" aria-hidden="true">#</a> 4. 安装指定版本 Node和npm</h2><h3 id="_4-1-安装node-插件" tabindex="-1"><a class="header-anchor" href="#_4-1-安装node-插件" aria-hidden="true">#</a> 4.1 安装node 插件</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609155457132.png" alt="image-20230609155457132" tabindex="0" loading="lazy"><figcaption>image-20230609155457132</figcaption></figure><h3 id="_4-2-配置node环境" tabindex="-1"><a class="header-anchor" href="#_4-2-配置node环境" aria-hidden="true">#</a> 4.2 配置node环境</h3><p>在全局配置工具中配置node环境</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609160051407.png" alt="image-20230609160051407" tabindex="0" loading="lazy"><figcaption>image-20230609160051407</figcaption></figure><blockquote><p>注意此处的自动安装是需要有触发时机的</p></blockquote><h3 id="_4-3-触发自动安装" tabindex="-1"><a class="header-anchor" href="#_4-3-触发自动安装" aria-hidden="true">#</a> 4.3 触发自动安装</h3><p>新建job的时候，选自由项目，但是在写job的时候，一定要勾选如下复选框，才会触发node安装。</p><p>Provide Node &amp; npm bin/ folder to PATH</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609160307858.png" alt="image-20230609160307858" tabindex="0" loading="lazy"><figcaption>image-20230609160307858</figcaption></figure><p>部署后</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609160005063.png" alt="image-20230609160005063" tabindex="0" loading="lazy"><figcaption>image-20230609160005063</figcaption></figure><h2 id="_5-docker部署" tabindex="-1"><a class="header-anchor" href="#_5-docker部署" aria-hidden="true">#</a> 5. Docker部署</h2><h3 id="_5-1-插件管理中安装docker" tabindex="-1"><a class="header-anchor" href="#_5-1-插件管理中安装docker" aria-hidden="true">#</a> 5.1 插件管理中安装docker</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609151733203.png" alt="image-20230609151733203" tabindex="0" loading="lazy"><figcaption>image-20230609151733203</figcaption></figure><h3 id="_5-2-docker-开启端口供外部程序访问" tabindex="-1"><a class="header-anchor" href="#_5-2-docker-开启端口供外部程序访问" aria-hidden="true">#</a> 5.2 docker 开启端口供外部程序访问</h3><p>docker服务文件位置 /usr/lib/systemd/system/docker.service</p><p>编辑 docker.service</p><p>找到Service标签下的ExecStart属性</p><p>注释掉原来的 , 添加如下内容</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock --containerd=/run/containerd/containerd.sock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609152113946.png" alt="image-20230609152113946" tabindex="0" loading="lazy"><figcaption>image-20230609152113946</figcaption></figure><p>重新加载配置并重启docker服务</p><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>systemctl daemon-reload
systemctl restart docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-配置docker集群" tabindex="-1"><a class="header-anchor" href="#_5-3-配置docker集群" aria-hidden="true">#</a> 5.3 配置docker集群</h3><p>节点管理-&gt;configureClouds-&gt;配置集群</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609153540277.png" alt="image-20230609153540277" tabindex="0" loading="lazy"><figcaption>image-20230609153540277</figcaption></figure><h3 id="_5-4-项目中添加docker构建步骤" tabindex="-1"><a class="header-anchor" href="#_5-4-项目中添加docker构建步骤" aria-hidden="true">#</a> 5.4 项目中添加docker构建步骤</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609153939147.png" alt="image-20230609153939147" tabindex="0" loading="lazy"><figcaption>image-20230609153939147</figcaption></figure><h3 id="_5-5-部署日志" tabindex="-1"><a class="header-anchor" href="#_5-5-部署日志" aria-hidden="true">#</a> 5.5 部署日志</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609154845541.png" alt="image-20230609154845541" tabindex="0" loading="lazy"><figcaption>image-20230609154845541</figcaption></figure><h2 id="_6-ssh上传文件到服务器" tabindex="-1"><a class="header-anchor" href="#_6-ssh上传文件到服务器" aria-hidden="true">#</a> 6. SSH上传文件到服务器</h2><h3 id="_6-1-安装插件-publish-over-ssh" tabindex="-1"><a class="header-anchor" href="#_6-1-安装插件-publish-over-ssh" aria-hidden="true">#</a> 6.1 安装插件 Publish Over SSH</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609160732882.png" alt="image-20230609160732882" tabindex="0" loading="lazy"><figcaption>image-20230609160732882</figcaption></figure><h3 id="_6-2-配置ssh服务器信息" tabindex="-1"><a class="header-anchor" href="#_6-2-配置ssh服务器信息" aria-hidden="true">#</a> 6.2 配置SSH服务器信息</h3><p>SSH Servers</p><p>系统管理-&gt;系统配置-&gt;SSH Servers</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609163032628.png" alt="image-20230609163032628" tabindex="0" loading="lazy"><figcaption>image-20230609163032628</figcaption></figure><h3 id="_6-3-项目部署配置" tabindex="-1"><a class="header-anchor" href="#_6-3-项目部署配置" aria-hidden="true">#</a> 6.3 项目部署配置</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230609163121649.png" alt="image-20230609163121649" tabindex="0" loading="lazy"><figcaption>image-20230609163121649</figcaption></figure><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,84),b={href:"https://blog.51cto.com/u_14866376/5966900",target:"_blank",rel:"noopener noreferrer"};function f(z,_){const n=t("ExternalLinkIcon");return r(),o("div",null,[c,i("ul",null,[i("li",null,[l,i("p",null,[e("访问："),i("a",h,[e("http://localhost:18080/"),s(n)])]),p]),m]),u,i("p",null,[i("a",b,[e("jenkins自动安装的坑【避坑】"),s(n)])])])}const v=g(d,[["render",f],["__file","jenkins-x-deploy-action.html.vue"]]);export{v as default};
